import { __decorate, __metadata, __values } from "tslib";
import { Component, ViewChild, ElementRef, forwardRef, Input, Output, EventEmitter, SimpleChanges, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
var LSelect2Component = /** @class */ (function () {
    function LSelect2Component(_renderer) {
        this._renderer = _renderer;
        this.options = {};
        this.required = false;
        this.maxCount = Number.MAX_SAFE_INTEGER;
        this.minCount = Number.MIN_SAFE_INTEGER;
        this.valueChange = new EventEmitter();
        this._onChange = function (_) { };
        this._onTouched = function () { };
    }
    LSelect2Component_1 = LSelect2Component;
    LSelect2Component.prototype.ngOnInit = function () { };
    LSelect2Component.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._jqueryElement = $(this.selectControll.nativeElement);
        this.initSelect2();
        this._jqueryElement.on('select2:select select2:unselect', function (e) {
            var e_1, _a;
            var data = _this._jqueryElement.select2('data');
            try {
                for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    delete item.element;
                    delete item.disabled;
                    delete item.selected;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!_this.options.multiple) {
                data = (e.type == 'select2:unselect') ? null : data[0];
            }
            _this.selectedValue = data;
            _this._onChange(data);
            _this.valueChange.emit(data);
        });
        if (this.selectedValue) {
            this.setSelect2Value(this.selectedValue);
        }
    };
    LSelect2Component.prototype.ngOnChanges = function (changes) {
        if (!this._jqueryElement)
            return;
        if (this.hasChanged(changes)) {
            this.initSelect2();
            if (this.selectedValue) {
                this.setSelect2Value(this.selectedValue);
            }
        }
    };
    LSelect2Component.prototype.ngOnDestroy = function () {
        this._jqueryElement.select2('destroy');
    };
    LSelect2Component.prototype.writeValue = function (value) {
        this.selectedValue = value;
        if (value !== null && value !== undefined)
            this.setSelect2Value(value);
    };
    LSelect2Component.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    LSelect2Component.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    LSelect2Component.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    LSelect2Component.prototype.validate = function (c) {
        if (this.disabled) {
            return null;
        }
        var length = this.selectedValue ? this.selectedValue.length : 0;
        if (this.required === true && length === 0) {
            return { required: true };
        }
        if (this.minCount > 0 && length < this.minCount) {
            return { minCount: true };
        }
        if (this.maxCount > 0 && length > this.maxCount) {
            return { maxCount: true };
        }
        return null;
    };
    LSelect2Component.prototype.initSelect2 = function () {
        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {
            this._jqueryElement.select2('destroy');
            this._renderer.setProperty(this.selectControll.nativeElement, 'innerHTML', '');
        }
        var options = {
            data: this.data
        };
        Object.assign(options, this.options);
        this._jqueryElement.select2(options);
    };
    LSelect2Component.prototype.setSelect2Value = function (value) {
        if (!this._jqueryElement || !value) {
            this.selectedValue = value;
            return;
        }
        ;
        var targetVal = value['id'] || value;
        if (Array.isArray(value)) {
            targetVal = value.map(function (x) { return x['id']; });
        }
        this._jqueryElement.val(targetVal).trigger('change');
    };
    LSelect2Component.prototype.hasChanged = function (changes) {
        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {
            return true;
        }
        if (changes['options'] && JSON.stringify(changes['options'].previousValue) !== JSON.stringify(changes['options'].currentValue)) {
            return true;
        }
        return false;
    };
    var LSelect2Component_1;
    LSelect2Component.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    __decorate([
        ViewChild('selectControll'),
        __metadata("design:type", ElementRef)
    ], LSelect2Component.prototype, "selectControll", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], LSelect2Component.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LSelect2Component.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LSelect2Component.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LSelect2Component.prototype, "required", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LSelect2Component.prototype, "maxCount", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LSelect2Component.prototype, "minCount", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], LSelect2Component.prototype, "valueChange", void 0);
    LSelect2Component = LSelect2Component_1 = __decorate([
        Component({
            selector: 'l-select2',
            template: "<select #selectControll [disabled]=\"disabled\" style=\"width: 100%\">\r\n  <ng-content select=\"option, optgroup\">\r\n  </ng-content>\r\n</select>",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return LSelect2Component_1; }),
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return LSelect2Component_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [Renderer2])
    ], LSelect2Component);
    return LSelect2Component;
}());
export { LSelect2Component };
//# sourceMappingURL=data:application/json;base64,