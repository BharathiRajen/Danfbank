var LSelect2Component_1;
import { __decorate, __metadata } from "tslib";
import { Component, ViewChild, ElementRef, forwardRef, Input, Output, EventEmitter, SimpleChanges, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
let LSelect2Component = LSelect2Component_1 = class LSelect2Component {
    constructor(_renderer) {
        this._renderer = _renderer;
        this.options = {};
        this.required = false;
        this.maxCount = Number.MAX_SAFE_INTEGER;
        this.minCount = Number.MIN_SAFE_INTEGER;
        this.valueChange = new EventEmitter();
        this._onChange = (_) => { };
        this._onTouched = () => { };
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this._jqueryElement = $(this.selectControll.nativeElement);
        this.initSelect2();
        this._jqueryElement.on('select2:select select2:unselect', (e) => {
            let data = this._jqueryElement.select2('data');
            for (let item of data) {
                delete item.element;
                delete item.disabled;
                delete item.selected;
            }
            if (!this.options.multiple) {
                data = (e.type == 'select2:unselect') ? null : data[0];
            }
            this.selectedValue = data;
            this._onChange(data);
            this.valueChange.emit(data);
        });
        if (this.selectedValue) {
            this.setSelect2Value(this.selectedValue);
        }
    }
    ngOnChanges(changes) {
        if (!this._jqueryElement)
            return;
        if (this.hasChanged(changes)) {
            this.initSelect2();
            if (this.selectedValue) {
                this.setSelect2Value(this.selectedValue);
            }
        }
    }
    ngOnDestroy() {
        this._jqueryElement.select2('destroy');
    }
    writeValue(value) {
        this.selectedValue = value;
        if (value !== null && value !== undefined)
            this.setSelect2Value(value);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    validate(c) {
        if (this.disabled) {
            return null;
        }
        let length = this.selectedValue ? this.selectedValue.length : 0;
        if (this.required === true && length === 0) {
            return { required: true };
        }
        if (this.minCount > 0 && length < this.minCount) {
            return { minCount: true };
        }
        if (this.maxCount > 0 && length > this.maxCount) {
            return { maxCount: true };
        }
        return null;
    }
    initSelect2() {
        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {
            this._jqueryElement.select2('destroy');
            this._renderer.setProperty(this.selectControll.nativeElement, 'innerHTML', '');
        }
        let options = {
            data: this.data
        };
        Object.assign(options, this.options);
        this._jqueryElement.select2(options);
    }
    setSelect2Value(value) {
        if (!this._jqueryElement || !value) {
            this.selectedValue = value;
            return;
        }
        ;
        let targetVal = value['id'] || value;
        if (Array.isArray(value)) {
            targetVal = value.map(x => x['id']);
        }
        this._jqueryElement.val(targetVal).trigger('change');
    }
    hasChanged(changes) {
        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {
            return true;
        }
        if (changes['options'] && JSON.stringify(changes['options'].previousValue) !== JSON.stringify(changes['options'].currentValue)) {
            return true;
        }
        return false;
    }
};
LSelect2Component.ctorParameters = () => [
    { type: Renderer2 }
];
__decorate([
    ViewChild('selectControll'),
    __metadata("design:type", ElementRef)
], LSelect2Component.prototype, "selectControll", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], LSelect2Component.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], LSelect2Component.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LSelect2Component.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], LSelect2Component.prototype, "required", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LSelect2Component.prototype, "maxCount", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LSelect2Component.prototype, "minCount", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], LSelect2Component.prototype, "valueChange", void 0);
LSelect2Component = LSelect2Component_1 = __decorate([
    Component({
        selector: 'l-select2',
        template: "<select #selectControll [disabled]=\"disabled\" style=\"width: 100%\">\r\n  <ng-content select=\"option, optgroup\">\r\n  </ng-content>\r\n</select>",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LSelect2Component_1),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => LSelect2Component_1),
                multi: true
            }
        ]
    }),
    __metadata("design:paramtypes", [Renderer2])
], LSelect2Component);
export { LSelect2Component };
//# sourceMappingURL=data:application/json;base64,