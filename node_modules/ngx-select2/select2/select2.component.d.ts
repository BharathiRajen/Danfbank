import { ElementRef, EventEmitter, SimpleChanges, Renderer2 } from '@angular/core';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class LSelect2Component implements ControlValueAccessor, Validator {
    private _renderer;
    selectControll: ElementRef;
    data: Array<any>;
    disabled: boolean;
    options: any;
    required: boolean;
    maxCount: number;
    minCount: number;
    valueChange: EventEmitter<any>;
    selectedValue: any | Array<any>;
    private _jqueryElement;
    private _onChange;
    private _onTouched;
    constructor(_renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(value: any | Array<any>): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    validate(c: AbstractControl): ValidationErrors;
    initSelect2(): void;
    private setSelect2Value;
    private hasChanged;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LSelect2Component, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LSelect2Component, "l-select2", never, { "options": "options"; "required": "required"; "maxCount": "maxCount"; "minCount": "minCount"; "disabled": "disabled"; "data": "data"; }, { "valueChange": "valueChange"; }, never, ["option, optgroup"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0Mi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2VsZWN0Mi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMU2VsZWN0MkNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3Ige1xyXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XHJcbiAgICBzZWxlY3RDb250cm9sbDogRWxlbWVudFJlZjtcclxuICAgIGRhdGE6IEFycmF5PGFueT47XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIG9wdGlvbnM6IGFueTtcclxuICAgIHJlcXVpcmVkOiBib29sZWFuO1xyXG4gICAgbWF4Q291bnQ6IG51bWJlcjtcclxuICAgIG1pbkNvdW50OiBudW1iZXI7XHJcbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBzZWxlY3RlZFZhbHVlOiBhbnkgfCBBcnJheTxhbnk+O1xyXG4gICAgcHJpdmF0ZSBfanF1ZXJ5RWxlbWVudDtcclxuICAgIHByaXZhdGUgX29uQ2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkO1xyXG4gICAgY29uc3RydWN0b3IoX3JlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55IHwgQXJyYXk8YW55Pik6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkO1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnM7XHJcbiAgICBpbml0U2VsZWN0MigpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBzZXRTZWxlY3QyVmFsdWU7XHJcbiAgICBwcml2YXRlIGhhc0NoYW5nZWQ7XHJcbn1cclxuIl19