import { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Select2OptionData } from './ng-select2.interface';
import { Options } from 'select2';
import * as ɵngcc0 from '@angular/core';
export declare class NgSelect2Component implements AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor {
    private renderer;
    zone: NgZone;
    _element: ElementRef;
    selector: ElementRef;
    data: Array<Select2OptionData>;
    placeholder: string;
    dropdownParent: string;
    allowClear: boolean;
    value: string | string[];
    width: string;
    disabled: boolean;
    options: Options;
    valueChanged: EventEmitter<string | string[]>;
    private element;
    private check;
    constructor(renderer: Renderer2, zone: NgZone, _element: ElementRef);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private initPlugin;
    private setElementValue;
    writeValue(value: any): void;
    propagateChange: (value: string | string[]) => void;
    registerOnChange(fn: any): void;
    registerOnTouched(): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgSelect2Component, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgSelect2Component, "ng-select2", never, { "placeholder": "placeholder"; "dropdownParent": "dropdownParent"; "allowClear": "allowClear"; "disabled": "disabled"; "value": "value"; "data": "data"; "width": "width"; "options": "options"; }, { "valueChanged": "valueChanged"; }, never, ["option, optgroup"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2VsZWN0Mi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmctc2VsZWN0Mi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFNlbGVjdDJPcHRpb25EYXRhIH0gZnJvbSAnLi9uZy1zZWxlY3QyLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICdzZWxlY3QyJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdTZWxlY3QyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRG9DaGVjaywgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcclxuICAgIHpvbmU6IE5nWm9uZTtcclxuICAgIF9lbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgc2VsZWN0b3I6IEVsZW1lbnRSZWY7XHJcbiAgICBkYXRhOiBBcnJheTxTZWxlY3QyT3B0aW9uRGF0YT47XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgZHJvcGRvd25QYXJlbnQ6IHN0cmluZztcclxuICAgIGFsbG93Q2xlYXI6IGJvb2xlYW47XHJcbiAgICB2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW107XHJcbiAgICB3aWR0aDogc3RyaW5nO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBvcHRpb25zOiBPcHRpb25zO1xyXG4gICAgdmFsdWVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgc3RyaW5nW10+O1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjaGVjaztcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGluaXRQbHVnaW47XHJcbiAgICBwcml2YXRlIHNldEVsZW1lbnRWYWx1ZTtcclxuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICBwcm9wYWdhdGVDaGFuZ2U6ICh2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW10pID0+IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoKTogdm9pZDtcclxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuIl19