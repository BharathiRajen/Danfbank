import { Renderer2, ElementRef, OnInit, OnDestroy, NgZone } from '@angular/core';
import { ResizableDirective } from './resizable.directive';
import { Edges } from './interfaces/edges.interface';
/**
 * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle
 *
 * For example
 *
 * ```html
 * <div mwlResizable>
 *   <div mwlResizeHandle [resizeEdges]="{bottom: true, right: true}"></div>
 * </div>
 * ```
 * Or in case they are sibling elements:
 * ```html
 * <div mwlResizable #resizableElement="mwlResizable"></div>
 * <div mwlResizeHandle [resizableContainer]="resizableElement" [resizeEdges]="{bottom: true, right: true}"></div>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ResizeHandleDirective implements OnInit, OnDestroy {
    private renderer;
    private element;
    private zone;
    private resizableDirective;
    /**
     * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on
     */
    resizeEdges: Edges;
    /**
     * Reference to ResizableDirective in case if handle is not located inside of element with ResizableDirective
     */
    resizableContainer: ResizableDirective;
    private eventListeners;
    private destroy$;
    constructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizableDirective: ResizableDirective);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onMousedown(event: MouseEvent | TouchEvent, clientX: number, clientY: number): void;
    /**
     * @hidden
     */
    onMouseup(clientX: number, clientY: number): void;
    private readonly resizable;
    private onMousemove;
    private unsubscribeEventListeners;
    private listenOnTheHost;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizeHandleDirective, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ResizeHandleDirective, "[mwlResizeHandle]", never, { "resizeEdges": "resizeEdges"; "resizableContainer": "resizableContainer"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWhhbmRsZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicmVzaXplLWhhbmRsZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNpemFibGVEaXJlY3RpdmUgfSBmcm9tICcuL3Jlc2l6YWJsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRWRnZXMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWRnZXMuaW50ZXJmYWNlJztcbi8qKlxuICogQW4gZWxlbWVudCBwbGFjZWQgaW5zaWRlIGEgYG13bFJlc2l6YWJsZWAgZGlyZWN0aXZlIHRvIGJlIHVzZWQgYXMgYSBkcmFnIGFuZCByZXNpemUgaGFuZGxlXG4gKlxuICogRm9yIGV4YW1wbGVcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG13bFJlc2l6YWJsZT5cbiAqICAgPGRpdiBtd2xSZXNpemVIYW5kbGUgW3Jlc2l6ZUVkZ2VzXT1cIntib3R0b206IHRydWUsIHJpZ2h0OiB0cnVlfVwiPjwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqIE9yIGluIGNhc2UgdGhleSBhcmUgc2libGluZyBlbGVtZW50czpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbXdsUmVzaXphYmxlICNyZXNpemFibGVFbGVtZW50PVwibXdsUmVzaXphYmxlXCI+PC9kaXY+XG4gKiA8ZGl2IG13bFJlc2l6ZUhhbmRsZSBbcmVzaXphYmxlQ29udGFpbmVyXT1cInJlc2l6YWJsZUVsZW1lbnRcIiBbcmVzaXplRWRnZXNdPVwie2JvdHRvbTogdHJ1ZSwgcmlnaHQ6IHRydWV9XCI+PC9kaXY+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmVzaXplSGFuZGxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHJlc2l6YWJsZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgYEVkZ2VzYCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZWRnZXMgb2YgdGhlIHBhcmVudCBlbGVtZW50IHRoYXQgZHJhZ2dpbmcgdGhlIGhhbmRsZSB3aWxsIHRyaWdnZXIgYSByZXNpemUgb25cbiAgICAgKi9cbiAgICByZXNpemVFZGdlczogRWRnZXM7XG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIFJlc2l6YWJsZURpcmVjdGl2ZSBpbiBjYXNlIGlmIGhhbmRsZSBpcyBub3QgbG9jYXRlZCBpbnNpZGUgb2YgZWxlbWVudCB3aXRoIFJlc2l6YWJsZURpcmVjdGl2ZVxuICAgICAqL1xuICAgIHJlc2l6YWJsZUNvbnRhaW5lcjogUmVzaXphYmxlRGlyZWN0aXZlO1xuICAgIHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIHJlc2l6YWJsZURpcmVjdGl2ZTogUmVzaXphYmxlRGlyZWN0aXZlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uTW91c2Vkb3duKGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCwgY2xpZW50WDogbnVtYmVyLCBjbGllbnRZOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbk1vdXNldXAoY2xpZW50WDogbnVtYmVyLCBjbGllbnRZOiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzaXphYmxlO1xuICAgIHByaXZhdGUgb25Nb3VzZW1vdmU7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZUV2ZW50TGlzdGVuZXJzO1xuICAgIHByaXZhdGUgbGlzdGVuT25UaGVIb3N0O1xufVxuIl19