import { EventEmitter } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { ListItem, IDropdownSettings } from "./multiselect.model";
import { ListFilterPipe } from "./list-filter.pipe";
import * as ɵngcc0 from '@angular/core';
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare class MultiSelectComponent implements ControlValueAccessor {
    private listFilterPipe;
    _settings: IDropdownSettings;
    _data: Array<ListItem>;
    selectedItems: Array<ListItem>;
    isDropdownOpen: boolean;
    _placeholder: string;
    private _sourceDataType;
    private _sourceDataFields;
    filter: ListItem;
    defaultSettings: IDropdownSettings;
    placeholder: string;
    disabled: boolean;
    settings: IDropdownSettings;
    data: Array<any>;
    onFilterChange: EventEmitter<ListItem>;
    onDropDownClose: EventEmitter<ListItem>;
    onSelect: EventEmitter<ListItem>;
    onDeSelect: EventEmitter<ListItem>;
    onSelectAll: EventEmitter<Array<ListItem>>;
    onDeSelectAll: EventEmitter<Array<ListItem>>;
    private onTouchedCallback;
    private onChangeCallback;
    onFilterTextChange($event: any): void;
    constructor(listFilterPipe: ListFilterPipe);
    onItemClick($event: any, item: ListItem): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onTouched(): void;
    trackByFn(index: any, item: any): any;
    isSelected(clickedItem: ListItem): boolean;
    isLimitSelectionReached(): boolean;
    isAllItemsSelected(): boolean;
    showButton(): boolean;
    itemShowRemaining(): number;
    addSelected(item: ListItem): void;
    removeSelected(itemSel: ListItem): void;
    emittedValue(val: any): any;
    objectify(val: ListItem): {};
    toggleDropdown(evt: any): void;
    closeDropdown(): void;
    toggleSelectAll(): boolean;
    getFields(inputData: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelectComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelectComponent, "ng-multiselect-dropdown", never, { "disabled": "disabled"; "placeholder": "placeholder"; "settings": "settings"; "data": "data"; }, { "onFilterChange": "onFilterChange"; "onDropDownClose": "onDropDownClose"; "onSelect": "onSelect"; "onDeSelect": "onDeSelect"; "onSelectAll": "onSelectAll"; "onDeSelectAll": "onDeSelectAll"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTGlzdEl0ZW0sIElEcm9wZG93blNldHRpbmdzIH0gZnJvbSBcIi4vbXVsdGlzZWxlY3QubW9kZWxcIjtcbmltcG9ydCB7IExpc3RGaWx0ZXJQaXBlIH0gZnJvbSBcIi4vbGlzdC1maWx0ZXIucGlwZVwiO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRFJPUERPV05fQ09OVFJPTF9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTXVsdGlTZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBsaXN0RmlsdGVyUGlwZTtcbiAgICBfc2V0dGluZ3M6IElEcm9wZG93blNldHRpbmdzO1xuICAgIF9kYXRhOiBBcnJheTxMaXN0SXRlbT47XG4gICAgc2VsZWN0ZWRJdGVtczogQXJyYXk8TGlzdEl0ZW0+O1xuICAgIGlzRHJvcGRvd25PcGVuOiBib29sZWFuO1xuICAgIF9wbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIHByaXZhdGUgX3NvdXJjZURhdGFUeXBlO1xuICAgIHByaXZhdGUgX3NvdXJjZURhdGFGaWVsZHM7XG4gICAgZmlsdGVyOiBMaXN0SXRlbTtcbiAgICBkZWZhdWx0U2V0dGluZ3M6IElEcm9wZG93blNldHRpbmdzO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc2V0dGluZ3M6IElEcm9wZG93blNldHRpbmdzO1xuICAgIGRhdGE6IEFycmF5PGFueT47XG4gICAgb25GaWx0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxMaXN0SXRlbT47XG4gICAgb25Ecm9wRG93bkNsb3NlOiBFdmVudEVtaXR0ZXI8TGlzdEl0ZW0+O1xuICAgIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8TGlzdEl0ZW0+O1xuICAgIG9uRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxMaXN0SXRlbT47XG4gICAgb25TZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxMaXN0SXRlbT4+O1xuICAgIG9uRGVTZWxlY3RBbGw6IEV2ZW50RW1pdHRlcjxBcnJheTxMaXN0SXRlbT4+O1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIG9uRmlsdGVyVGV4dENoYW5nZSgkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IobGlzdEZpbHRlclBpcGU6IExpc3RGaWx0ZXJQaXBlKTtcbiAgICBvbkl0ZW1DbGljaygkZXZlbnQ6IGFueSwgaXRlbTogTGlzdEl0ZW0pOiBib29sZWFuO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBvblRvdWNoZWQoKTogdm9pZDtcbiAgICB0cmFja0J5Rm4oaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xuICAgIGlzU2VsZWN0ZWQoY2xpY2tlZEl0ZW06IExpc3RJdGVtKTogYm9vbGVhbjtcbiAgICBpc0xpbWl0U2VsZWN0aW9uUmVhY2hlZCgpOiBib29sZWFuO1xuICAgIGlzQWxsSXRlbXNTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIHNob3dCdXR0b24oKTogYm9vbGVhbjtcbiAgICBpdGVtU2hvd1JlbWFpbmluZygpOiBudW1iZXI7XG4gICAgYWRkU2VsZWN0ZWQoaXRlbTogTGlzdEl0ZW0pOiB2b2lkO1xuICAgIHJlbW92ZVNlbGVjdGVkKGl0ZW1TZWw6IExpc3RJdGVtKTogdm9pZDtcbiAgICBlbWl0dGVkVmFsdWUodmFsOiBhbnkpOiBhbnk7XG4gICAgb2JqZWN0aWZ5KHZhbDogTGlzdEl0ZW0pOiB7fTtcbiAgICB0b2dnbGVEcm9wZG93bihldnQ6IGFueSk6IHZvaWQ7XG4gICAgY2xvc2VEcm9wZG93bigpOiB2b2lkO1xuICAgIHRvZ2dsZVNlbGVjdEFsbCgpOiBib29sZWFuO1xuICAgIGdldEZpZWxkcyhpbnB1dERhdGE6IGFueSk6IGFueVtdO1xufVxuIl19